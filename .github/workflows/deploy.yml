name: CI/CD Pipeline for .NET API

on:
  push:
    branches:
      - production
  pull_request:
    branches:
      - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Set up .NET Core
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0 # Specify your .NET version

    # Restore dependencies for the main application project
    - name: Restore .NET Application
      run: dotnet restore "./worklog-api.csproj"

    # Build and Publish the .NET Application
    - name: Build .NET Application
      run: dotnet publish "./worklog-api.csproj" -c Release -o publish

    # Create .env file for production environment directly
    - name: Create .env file for production
      run: |
        echo "DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING_PRODUCTION }}" > .env
      shell: bash
      env:
        DOTNET_ROOT: /usr/share/dotnet

    # Build the Docker image
    - name: Build Docker Image
      run: |
        docker build -t "${{ secrets.DOCKER_USERNAME }}"/worklog-api:latest .

    # Push Docker Image to Registry
    - name: Push Docker Image
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker push "${{ secrets.DOCKER_USERNAME }}"/worklog-api:latest

    # Deploy to VPS
    - name: Deploy to VPS
      env:
        VPS_IP: ${{ secrets.VPS_IP }}
        VPS_USER: ${{ secrets.VPS_USER }}
        VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
      run: |
        # Save the private SSH key
        echo "$VPS_SSH_KEY" > private_key
        chmod 600 private_key

        # Ensure the application directory exists on the VPS
        ssh -i private_key -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP "mkdir -p /home/$VPS_USER/worklog-api"

        # Transfer docker-compose.yml to the VPS
        scp -i private_key -o StrictHostKeyChecking=no docker-compose.yml $VPS_USER@$VPS_IP:/home/$VPS_USER/worklog-api/

        # Backup the existing volume data
        ssh -i private_key -o StrictHostKeyChecking=no $VPS_USER@$VPS_IP << EOF
          docker run --rm -v worklog_data:/volume -v /home/$VPS_USER/worklog-api:/backup alpine tar -czvf /backup/volume_backup.tar.gz -C /volume . 
        EOF

        # SSH into the VPS and d
